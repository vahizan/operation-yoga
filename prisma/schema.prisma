datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  phone         String?
  email         String         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  bookings      Booking[]
  type          UserType
  verificationTokens VerificationToken[]

  // Optional for WebAuthn support
  authenticators Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  passwordHash      String? @db.String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  userId       String   @db.ObjectId
  token      String
  expires    DateTime
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  id                    String  @id @default(auto()) @map("_id") @db.ObjectId
  credentialID          String  @unique
  userId                String  @db.ObjectId
  providerAccountId     String
  credentialPublicKey   String
  counter               Int
  credentialDeviceType  String
  credentialBackedUp    Boolean
  transports            String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}

model AdminLesson {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  availableSlots  Int
  name          String
  startTime     Int
  endTime       Int
  dayOfWeek     Int
  instructorId  String  @db.ObjectId
  lessonCreatorId   String?  @db.ObjectId
  room          String?
  location      String?
  price         Float
  currency      Currency  @default(USD)
}

model Lesson {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  availableSlots  Int
  startTime       DateTime
  endTime         DateTime
  instructorId    String  @db.ObjectId
  instructorName  String
  instructorImage String?
  room            String?
  location        String?
  price           Float
  currency        Currency  @default(USD)
}

model Booking {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  startTime       DateTime
  endTime         DateTime
  userId          String @db.ObjectId
  userName        String
  userImage       String?
  instructorId    String  @db.ObjectId
  instructorName  String
  instructorImage String?
  bookingStatus   BookingStatus @default(PENDING)
  lessonId        String  @db.ObjectId
  user            User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserType {
    ADMIN
    CUSTOMER
    BANNED
}

enum BookingStatus {
    PENDING
    CANCELLED
    CONFIRMED
}

enum Currency {
  USD
  EUR
  GBP
  INR
  CAD
  AUD
}